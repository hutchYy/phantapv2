#!/bin/sh

### BEGIN INIT INFO
# Provides:          phantap
# Required-Start:    $local_fs $network $named $time $syslog
# Required-Stop:     $local_fs $network $named $time $syslog
# Default-Start:     2 3 4 5
# Default-Stop:      0 1 6
# Short-Description: PhanTap init script
# Description:       This script starts and stops the PhanTap service
### END INIT INFO

# Load the VERBOSE setting and other rcS variables
. /lib/init/vars.sh

# Define LSB log_* functions.
. /lib/lsb/init-functions

EXTRA_COMMANDS="setup block_net conf_net fwd_all"

do_start()
{
    log_daemon_msg "Starting PhanTap service"

    # Start the process in the background
    nohup /usr/sbin/phantap-learn -i br-phantap -v1 -b '/etc/init.d/phantap block_net' -c '/etc/init.d/phantap conf_net' > /var/log/phantap.log 2>&1 &
    
    # Save the PID to a pidfile
    echo $! > /var/run/phantap.pid

    log_end_msg 0  # Assuming start is always successful
}

do_stop()
{
    log_daemon_msg "Stopping PhanTap service"
    start-stop-daemon --stop --quiet --pidfile /var/run/phantap.pid
    log_end_msg $?
}

do_block_net() {
    # block local output on br-phantap
    nft -f- <<EOI
table bridge phantap
flush table bridge phantap
table bridge phantap {
  chain output {
    type filter hook output priority 100; policy accept;
    meta obrname br-phantap drop \
      comment "block output until we detect a victim"
  }
}
EOI
}

do_fwd_all() {
    # Setting group_fwd_mask to 65528, Linux bridge doesn't forward 01:80:C2:00:00:0{0,1,2}
    # except if STP is disabled on the bridge then 01:80:C2:00:00:00 is forwarded
    # https://github.com/torvalds/linux/blob/fbb3abdf2223cd0dfc07de85fe5a43ba7f435bdf/net/bridge/br_input.c#L343-L346
    # Try to forward 01:80:C2:00:00:0{1,2} to all the other interfaces using 'dup',
    # even if pause frame will likely be filtered by the NIC
    INTFS="$(brctl show br-phantap | awk 'NR>1 {print $NF}')"
    nft -f- <<EOF1
table netdev phantap
flush table netdev phantap
table netdev phantap {
$(for INTF1 in $INTFS; do
cat <<EOF2
  chain $INTF1 {
    type filter hook ingress device $INTF1 priority 0; policy accept;
EOF2
for INTF2 in $INTFS; do
    [ $INTF1 = $INTF2 ] && continue
cat <<EOF3
    ether daddr 01:80:C2:00:00:01-01:80:C2:00:00:02 dup to $INTF2
EOF3
done
cat <<EOF2
  }
EOF2
done
)
}
EOF1
}

do_conf_net() {
    # P_VICTIM_MAC P_VICTIM_IP P_NETMASK P_GATEWAY_MAC P_GATEWAY_IP P_DNS P_NTP
    echo "conf_net: P_VICTIM_MAC=$P_VICTIM_MAC P_VICTIM_IP=$P_VICTIM_IP P_GATEWAY_MAC=$P_GATEWAY_MAC P_GATEWAY_IP=$P_GATEWAY_IP P_DNS=$P_DNS"

    _config_firewall

    if source <(grep = ./files/etc/phantap.conf); then
        # Run all commands in onnetconfig list
        for cmd in "${onnet_cmds[@]}"; do
            _handle_onconfig $cmd
        done
    fi

    if [ "$P_DNS" != "0.0.0.0" ]; then
        _config_dns
        # Run all commands in onnetconfig list
        for cmd in "${ondns_cmds[@]}"; do
            _handle_onconfig $cmd
        done
    fi
}


_config_dns() {
    resolvfile="/etc/resolv.conf"
    [ -z "$resolvfile" ] && { echo "Resolvfile not set"; exit; }
    echo "nameserver $P_DNS" > "$resolvfile"
    systemctl reload dnsmasq
}

_config_firewall() {
    P_INTF=phantap
    P_BRIDGE=br-phantap

    if [ -z "$P_BRIDGE" ]; then
        echo "Bridge not ready"
        exit 1
    fi

    P_BR_MAC=$(cat /sys/class/net/$P_BRIDGE/address)

    # Assuming that you need to get the default gateway for the specific interface
    P_GW_FAKEIP=$(ip route show dev $P_BRIDGE default | grep default | awk '{print $3}')
    if [ -z "$P_GW_FAKEIP" ]; then
        echo "No gateway IP found for the interface"
        exit 1
    fi

    nft -f- <<EOF
table bridge phantap
flush table bridge phantap
table bridge phantap {
  chain pre {
    type filter hook prerouting priority -200; policy accept;
    meta ibrname $P_BRIDGE ct mark and 0x1 == 0x1 meta pkttype set unicast ether daddr set $P_BR_MAC \
      comment "Intercept response traffic"
  }
  chain output {
    type filter hook output priority 100; policy accept;
    $(if [ "$P_GATEWAY_IP" != "0.0.0.0" ]; then
    cat <<EOS
    meta obrname $P_BRIDGE ether daddr $P_VICTIM_MAC ether saddr set $P_GATEWAY_MAC return \
      comment "Use gateway MAC to talk to the victim"
EOS
    else
    cat <<EOS
    meta obrname $P_BRIDGE ether daddr $P_VICTIM_MAC drop \
      comment "Do not talk to the victim as we don't know the gateway IP"
EOS
    fi)
    meta obrname $P_BRIDGE ether saddr set $P_VICTIM_MAC return \
      comment "Use victim MAC"
  }
}
table ip phantap
flush table ip phantap
table ip phantap {
  chain postnat {
    type nat hook postrouting priority 100; policy accept;
    oifname $P_BRIDGE ct mark set ct mark or 0x1 \
      comment "Mark our traffic so we can intercept response traffic"
    $(if [ "$P_GATEWAY_IP" != "0.0.0.0" ]; then
    cat <<EOS
    oifname $P_BRIDGE ip daddr $P_VICTIM_IP snat ip to $P_GATEWAY_IP \
      comment "Use gateway IP to talk to the victim"
EOS
    fi)
    oifname $P_BRIDGE snat ip to $P_VICTIM_IP \
      comment "Use victim IP"
  }
}
EOF
    # Add mac for the fake gateway
    ip neigh replace $P_GW_FAKEIP lladdr $P_GATEWAY_MAC dev $P_BRIDGE

    echo "PhanTap firewall rules applied, you now have internet"
}

_handle_onconfig() {
    /bin/sh -c "$1" || echo "'$1' failed"
}

case "$1" in
    start)
        do_start
        ;;
    stop)
        do_stop
        ;;
    restart|reload|force-reload)
        do_stop
        do_start
        ;;
    block_net)
        do_block_net
        ;;
    conf_net)
        do_conf_net
        ;;
    fwd_all)
        do_fwd_all
        ;;
    *)
        echo "Usage: $0 {start|stop|restart|block_net|conf_net|fwd_all}"
        exit 1
        ;;
esac

exit 0